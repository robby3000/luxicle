// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@map("sessions")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  image             String?
  bio               String?   @db.Text
  location          String?
  websiteUrl        String?   @map("website_url")
  twitterHandle     String?   @map("twitter_handle")
  instagramHandle   String?   @map("instagram_handle")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  onboardingCompleted Boolean   @default(false) @map("onboarding_completed")
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  challenges        Challenge[]
  luxicles          Luxicle[]
  following         Follows[]  @relation("Following")
  followers         Follows[]  @relation("Follower")
  messagesSent      Message[]  @relation("MessageSender")
  messagesReceived  Message[]  @relation("MessageReceiver")
  flags             Flag[]


  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Challenge {
  id            String     @id @default(cuid())
  title         String
  description   String     @db.Text
  rules         String?    @db.Text
  categoryId    String?    @map("category_id")
  coverImageUrl String?    @map("cover_image_url")
  opensAt       DateTime   @map("opens_at")
  closesAt      DateTime?  @map("closes_at")
  isFeatured    Boolean    @default(false) @map("is_featured")
  submissionCount Int      @default(0) @map("submission_count")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  userId        String     @map("user_id")
  
  // Relations
  category      Category?  @relation(fields: [categoryId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  luxicles      Luxicle[]
  tags          Tag[]      @relation("ChallengeTags")


  @@map("challenges")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?     @db.Text
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  challenges  Challenge[]
  luxicles    Luxicle[]


  @@map("categories")
}

model Tag {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  usageCount Int        @default(0) @map("usage_count")
  createdAt  DateTime   @default(now()) @map("created_at")
  
  // Relations
  challenges Challenge[] @relation("ChallengeTags")
  luxicles   Luxicle[]  @relation("LuxicleTags")


  @@map("tags")
}

model Luxicle {
  id           String     @id @default(cuid())
  userId       String     @map("user_id")
  challengeId  String?    @map("challenge_id")
  title        String
  description  String?    @db.Text
  categoryId   String?    @map("category_id")
  isPublished  Boolean    @default(true) @map("is_published")
  viewCount    Int        @default(0) @map("view_count")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  challenge    Challenge? @relation(fields: [challengeId], references: [id])
  category     Category?  @relation(fields: [categoryId], references: [id])
  items        LuxicleItem[]
  tags         Tag[]      @relation("LuxicleTags")
  flags        Flag[]

  @@map("luxicles")
}

model LuxicleItem {
  id           String   @id @default(cuid())
  luxicleId    String   @map("luxicle_id")
  position     Int
  title        String
  description  String?  @db.Text
  mediaUrl     String?  @map("media_url")
  embedProvider String? @map("embed_provider")
  embedData    Json?    @map("embed_data")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  luxicle      Luxicle  @relation(fields: [luxicleId], references: [id], onDelete: Cascade)

  @@map("luxicle_items")
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followeeId  String   @map("followee_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee    User     @relation("Following", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@map("follows")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  body       String   @db.Text
  readAt     DateTime? @map("read_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Flag {
  id         String   @id @default(cuid())
  reporterId String   @map("reporter_id")
  luxicleId  String   @map("luxicle_id")
  reason     String   @db.Text
  details    String?  @db.Text
  status     String   @default("pending")
  adminNotes String?  @map("admin_notes") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  resolvedAt DateTime? @map("resolved_at")
  
  // Relations
  reporter   User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  luxicle    Luxicle  @relation(fields: [luxicleId], references: [id], onDelete: Cascade)


  @@map("flags")
}
